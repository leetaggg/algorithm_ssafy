import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;


public class BJ14716 {

	private static int[][] arr;
	private static int n;
	private static int m;
	private static boolean[][] isVisited;

	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		
		// n,m 입력
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		
		arr = new int[n][m];
		isVisited = new boolean[n][m];
		//배열 입력
		for (int i = 0; i < n; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			for (int j = 0; j < m; j++) {
				arr[i][j] = Integer.parseInt(st.nextToken());
			}
		}//end for 입력완료
		
		int cnt = 0;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if(dfs(i, j)) {
					cnt++;
				}
			}
		}
		System.out.println(cnt);
		
		
	}//end main

	private static boolean dfs(int i, int j) {
		
		//범위 벗어 나면 false
		if(i < 0 || i >= n || j < 0 || j >= m || isVisited[i][j] || arr[i][j] == 0) {
			return false;
		}
		//방문하지 않았다면 방문하기
		if(arr[i][j] == 1 && !isVisited[i][j]) {
			isVisited[i][j] = true;//방문처리
			dfs(i-1, j); //상
			dfs(i+1, j); //하
			dfs(i, j-1); //좌
			dfs(i, j+1); //우
			dfs(i-1, j-1);//대각선들
			dfs(i+1, j-1);
			dfs(i+1, j+1);
			dfs(i-1, j+1);
			
			return true;
		}
		return false;
		
	}
	

}//end class
